<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>读论文有感</title>
      <link href="/10-yue-28-ri-du-lun-wen-you-gan/"/>
      <url>/10-yue-28-ri-du-lun-wen-you-gan/</url>
      
        <content type="html"><![CDATA[<h3 id="本篇论文发表于2021年10月14日-地址为-https-dl-acm-org-doi-abs-10-1145-3457611-sid-SCITRUS"><a href="#本篇论文发表于2021年10月14日-地址为-https-dl-acm-org-doi-abs-10-1145-3457611-sid-SCITRUS" class="headerlink" title="本篇论文发表于2021年10月14日,地址为 https://dl.acm.org/doi/abs/10.1145/3457611?sid=SCITRUS"></a>本篇论文发表于2021年10月14日,地址为 <code>https://dl.acm.org/doi/abs/10.1145/3457611?sid=SCITRUS</code></h3><h1 id="IP-Geolocation-through-Reverse-DNS"><a href="#IP-Geolocation-through-Reverse-DNS" class="headerlink" title="IP Geolocation through Reverse DNS"></a>IP Geolocation through Reverse DNS</h1><h2 id="1-背景简介"><a href="#1-背景简介" class="headerlink" title="1.背景简介"></a>1.背景简介</h2><blockquote><p>IP地址定位技术是一种将网络设备的IP地址映射到对应地理位置的技术.IP 定位技术通常广泛应用于网络安全、物联网系统、社交网络、内容推送等领域.网络安全领域中，IP定位技术可以将用户账号与常用登录IP地址绑定验证是否存在IP欺诈、识别非人类流量来进行用户身份验证。同时，该技术还可用于系统监控，从维护<br>日志中定位脆弱设备，进一步追溯攻击增强系统防护，以达到报警联动。物联网技术通过传感设备、控制设备将终端设备与网络空间相连，将用户对网络空间的操作转化为具体实体设备上的控制。其中，IP 定位技术在车联网、工控物联网、移动终端等系统中的定位与通信中起着关键作用。网络应用服务通常会根据用户的IP地址为用户提供定制化服务，例如即时通信软件向用户推送当地天气、新闻或附近的活动资讯。此外，IP定位技术还可以应用于网络性能优化，网络代理服务商可以通过网络节点的物理位置优化通信线路，降低通信时延与系统开销，提升系统性能。尤其是对于不断增长的物联网设备，将IP地址映射到物理位置对于网络状况感知同样重要。因此，IP定位技术可以使许多应用程序更加深入地了解用户和客户来自何处，掌握用户的在线行为，从而增加应用程序的安全系数与衍生价值。 </p></blockquote><blockquote><p>ip定位的研究有两大类:1.利用ping,traceroute,BGP网络结构信息的网络时延和拓扑的方法.   2.互联网数据挖掘,包括网页内容,whois数据库,反向DNS,和社交网络等等.</p></blockquote><blockquote><p>IP 定位技术的基本原理是利用设备的注册数据库，时延信息或网络拓扑结构等信息来推测设备的物理位置。虽然该技术已经取得了一定的研究成果，但是由网络空间向物理空间的映射过程会不可避免的产生不确定性。网络测量的过程中存在着大量不可测误差，例如网络传输中的传输时延与排队时延等与传输距离无关的时延。在复杂网络中，此类时延导致的误差甚至可能会与网络测量时延的数量级相当。此外，网络拓扑估计不及时性与不准确性，大量高精度地标节点集的获取难度较大，以及现有在线IP位置数据库信息不准确等问题使得 IP定位技术的精度和准确性难以满足高精度的需求。因此，对 IP 定位技术的行一步研究具有十分重要的应用价值与研究价值。</p></blockquote><p>因此，该篇论文提出了一种通过反向DNS查找来推断出目标ip的地址的方法（对象为终端用户）,属于数据挖掘方向的研究.</p><blockquote><p>ip地理定位数据库将ip地址映射到与之关联的现实世界的地理位置.他们被用来在城市粒度上找到该ip的大概位置.这些数据库对于那些不需要知道用户准确位置的服务有极大的用处。（尤其是对那些拒绝应用访问其物理位置的人）<br>比如说当你在谷歌搜索一家餐馆时（仅输入restaurant），当谷歌浏览器知道你所在城市时与不知道所在城市提供的页面完全不同，进而影响了用户体验.<br><a href="https://imgtu.com/i/5Or94x"><img src="https://z3.ax1x.com/2021/10/28/5Or94x.jpg" alt="5Or94x.jpg"></a></p></blockquote><p>当然，ip定位还有其他许多用处，比如说内容分发网络，网上的广告等等。</p><h2 id="2-reverse-DNS-优点"><a href="#2-reverse-DNS-优点" class="headerlink" title="2.reverse DNS-优点"></a>2.reverse DNS-优点</h2><blockquote><p>高覆盖，高准确率.能周期性地以较短时间通过反向DNS查找得到ip空间的每个ip地址的规范主机名.从而通过规范主机名得到地址信息.</p></blockquote><blockquote><p>1.相比于网络延迟测量,向DNS服务器进行反向DNS查询速度更快</p></blockquote><blockquote><p>2.他们的方法可以离线进行，而且可扩展性好(指本篇论文)</p></blockquote><blockquote><p>3.其结果的中位数误差距离比以往的大部分研究都要好.(指本篇论文)</p></blockquote><blockquote><p>4.本篇论文的样本数据集比以往的工作所用的大几个数量级.</p></blockquote><p><a href="https://imgtu.com/i/5OfHeK"><img src="https://z3.ax1x.com/2021/10/29/5OfHeK.jpg" alt="5OfHeK.jpg"></a></p><h2 id="3-利用规范主机名确定地理位置的一些挑战"><a href="#3-利用规范主机名确定地理位置的一些挑战" class="headerlink" title="3.利用规范主机名确定地理位置的一些挑战"></a>3.利用规范主机名确定地理位置的一些挑战</h2><blockquote><p>1.不同ISP的命名方案不同(ad hoc),他们通常使用城市名的缩写,且他们对于同一个城市的缩写可能不同.例如:<strong>drr01.cral.id.frontiernet.net</strong> 这个主机名位于 <strong>Coeur D’Alene, Idaho</strong> .就连人想要看出<strong>cral</strong>对应的是<strong>Coeur D’Alene</strong>都有点困难.</p></blockquote><blockquote><p>2.可能存在不同国家有相同名字的城市,例如:<strong>Vancouver, Canada and Vancouver, USA</strong>.在这种情况下,主机名只包含<strong>vancouver</strong>是无法确认其地理位置的.再者,就算城市名不同，但有可能他们的缩写恰好相同,例如:<strong>nwmd</strong> 指的是<strong>New Richmond, WI</strong>还是<strong>New Maryland, NB</strong>,又或者这两个都不是.</p></blockquote><blockquote><p>3.同时，可能存在主机名可以被解释为多个地址的情况.例如:<strong>sur01.tacoma.wa.seattle.comcast.net</strong> 指的地址是<strong>Seattle, WA</strong>, 还是<strong>Tacoma, WA</strong>,甚至是 <strong>Sumner, WA</strong> .</p></blockquote><h2 id="4-本篇论文的一些贡献"><a href="#4-本篇论文的一些贡献" class="headerlink" title="4.本篇论文的一些贡献"></a>4.本篇论文的一些贡献</h2><h3 id="1-研究了2014-2018年间的反向DNS主机名的变化"><a href="#1-研究了2014-2018年间的反向DNS主机名的变化" class="headerlink" title="(1)研究了2014-2018年间的反向DNS主机名的变化"></a>(1)研究了2014-2018年间的反向DNS主机名的变化</h3><p><a href="https://imgtu.com/i/5XFz1H"><img src="https://z3.ax1x.com/2021/10/29/5XFz1H.png" alt="5XFz1H.png"></a></p><blockquote><p>还发现了64.8%的主机名（不是空的）五年里没有变化,这表明大量主机名是比较稳定的.<br>总之,11.5亿ip地址可以通过反向查询得到主机名，而且他们中的许多还包含具体的城市和机场代码。</p></blockquote><h3 id="2-使用机器学习-二项分类法-来分类根据主机名得到的地理位置候选者，并给符合要求的地理位置一个置信度分数"><a href="#2-使用机器学习-二项分类法-来分类根据主机名得到的地理位置候选者，并给符合要求的地理位置一个置信度分数" class="headerlink" title="(2)使用机器学习(二项分类法)来分类根据主机名得到的地理位置候选者，并给符合要求的地理位置一个置信度分数."></a>(2)使用机器学习(二项分类法)来分类根据主机名得到的地理位置候选者，并给符合要求的地理位置一个置信度分数.</h3><h3 id="3-与最高水准的三个基准模型相比表现得更好-同时发现了影响这些模型的表现的问题-并且还与两个商业ip地理位置数据库进行了对比，结果表明本论文提出的方法具有竞争性还能与他们互补，提高他们的准确率"><a href="#3-与最高水准的三个基准模型相比表现得更好-同时发现了影响这些模型的表现的问题-并且还与两个商业ip地理位置数据库进行了对比，结果表明本论文提出的方法具有竞争性还能与他们互补，提高他们的准确率" class="headerlink" title="(3)与最高水准的三个基准模型相比表现得更好.同时发现了影响这些模型的表现的问题.并且还与两个商业ip地理位置数据库进行了对比，结果表明本论文提出的方法具有竞争性还能与他们互补，提高他们的准确率."></a>(3)与最高水准的三个基准模型相比表现得更好.同时发现了影响这些模型的表现的问题.并且还与两个商业ip地理位置数据库进行了对比，结果表明本论文提出的方法具有竞争性还能与他们互补，提高他们的准确率.</h3><h3 id="（4）为了让学术界能够更好地复现，对代码进行了开源点击这里"><a href="#（4）为了让学术界能够更好地复现，对代码进行了开源点击这里" class="headerlink" title="（4）为了让学术界能够更好地复现，对代码进行了开源点击这里"></a>（4）为了让学术界能够更好地复现，对代码进行了开源<a href="github.com/microsoft/ReverseDNSGeolocation">点击这里</a></h3><h2 id="5-Reverse-DNS"><a href="#5-Reverse-DNS" class="headerlink" title="5.Reverse DNS"></a>5.Reverse DNS</h2><ol><li>正向DNS查找将有效的主机名比如<strong><a href="http://www.bing.com/">www.bing.com</a></strong>转换成应的ip地址集（可能有多个ip对应同一个域名）.反向DNS查找则相反.(但不是可逆的，不完全相反).反向DNS查找一般返回零个或一个主机名（规范主机名:底层网络基础设施），而正向DNS查找的域名一般用于命名网站或其他网络服务.（可参考<code>RFC1034</code>）</li><li> 反向DNS查找的实现是通过<code>PTR</code>和<code> CNAME</code>记录来实现的.</li></ol><blockquote><p>我们先来了解一下什么是IP反向解析。我们经常使用到得DNS服务器里面有两个区域，即“正向查找区域”和“反向查找区域”，正向查找区域就是我们通常所说的域名解析，反向查找区域即是这里所说的IP反向解析，它的作用就是通过查询IP地址的PTR记录来得到该IP地址指向的域名，当然，要成功得到域名就必需要有该IP地址的PTR记录。PTR记录是邮件交换记录的一种，邮件交换记录中有A记录和PTR记录，A记录解析名字到地址，而PTR记录解析地址到名字。地址是指一个客户端的IP地址，名字是指一个客户的完全合格域名。通过对PTR记录的查询，达到反查的目的。</p></blockquote><blockquote><p>由于在域名系统中，一个IP地址可以对应多个域名，因此从IP出发去找域名，理论上应该遍历整个域名树，但这在Internet上是不现实的。为了完成逆向域名解析，系统提供一个特别域，该特别域称为逆向解析域in-addr.arpa。这样欲解析的IP地址就会被表达成一种像域名一样的可显示串形式，后缀以逆向解析域域<br>名”in-addr.arpa”结尾。例如一个IP地址：222.211.233.244，其逆向域名表达方式为：244.233.221.222.in-addr.arpa</p></blockquote><blockquote><p>两种表达方式中IP地址部分顺序恰好相反，因为域名结构是自底向上(从子域到域)，而IP地址结构是自顶向下(从网络到主机)的。实质上逆向域名解析是将IP地址表达成一个域名,以地址做为索引的域名空间,这样逆向解析的很大部分可以纳入正向解析中</p></blockquote><p> <a href="https://imgtu.com/i/5j32dO"><img src="https://z3.ax1x.com/2021/10/29/5j32dO.jpg" alt="5j32dO.jpg"></a></p><h2 id="PTR介绍"><a href="#PTR介绍" class="headerlink" title="PTR介绍"></a>PTR介绍</h2><blockquote><p>PTR记录(Pointer Record)(互联网标准文件RFC1035)，是电子邮件系统中的邮件交换记录的一种；另一种邮件交换记录是A记录（在IPv4协议中）或AAAA记录（在IPv6协议中）.PTR记录常被用于反向地址解析。</p></blockquote><blockquote><p>假设您的网络地址范围是192.168.0.1-192.168.0.255，和192.168.0.1/24这个C段网络。那么对应的IP地址网络反解Zone文件格式为0.168.192.in-addr.arpa。当您在Zone文件0.168.192.in-addr.arpa内添加主机记录为1的PTR记录指向<a href="http://www.example.com时/">www.example.com时</a> IP地址192.168.0.1的反解即是<a href="http://www.example.com/">www.example.com</a></p></blockquote><h2 id="CNAME介绍（RFC2317）"><a href="#CNAME介绍（RFC2317）" class="headerlink" title="CNAME介绍（RFC2317）"></a>CNAME介绍（RFC2317）</h2><blockquote><p>真实名称记录(Canonical Name Record),是域名系统（DNS）的一种记录。CNAME记录用于将一个域名（同名）映射到另一个域名（真实名称），域名解析服务器遇到CNAME记录会以映射到的目标重新开始查询。这对于需要在同一个IP地址上运行多个服务的情况来说非常方便。若要同时运行文件传输服务和Web服务 则可以把ftp.example.com和<a href="http://www.example.com都指向dns记录example.com而后者则有一个指向ip地址的a记录.如此一来,若服务器ip地址改变,则只需修改example.com的a记录即可.cname记录必须指向另一个域名,而不能是ip地址./">www.example.com都指向DNS记录example.com而后者则有一个指向IP地址的A记录。如此一来，若服务器IP地址改变，则只需修改example.com的A记录即可。CNAME记录必须指向另一个域名，而不能是IP地址。</a><br> <a href="https://imgtu.com/i/5jGrb6"><img src="https://z3.ax1x.com/2021/10/29/5jGrb6.png" alt="5jGrb6.png"></a> </p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>关于躺在床上刷知乎得到的一些收获</title>
      <link href="/guan-yu-tang-zai-chuang-shang-shua-zhi-hu-de-dao-de-yi-xie-shou-huo/"/>
      <url>/guan-yu-tang-zai-chuang-shang-shua-zhi-hu-de-dao-de-yi-xie-shou-huo/</url>
      
        <content type="html"><![CDATA[<h1 id="计算机保研"><a href="#计算机保研" class="headerlink" title="计算机保研"></a>计算机保研</h1><h2 id="1-夏令营"><a href="#1-夏令营" class="headerlink" title="1.夏令营"></a>1.夏令营</h2><blockquote><p>1.前五学期的rank非常重要！！！！夏令营也只能看前五学期的学分绩。<br>2.夏令营的敲门砖是rank，所以尽可能的是第一,就计算机而言，强的211和几乎所有985的rank1应该能入几乎所有学校的夏令营（现在计算机越来越卷了！！！！）不过rank1肯定是尽可能去争取的<br>3.入营后，面试考核主要是涉及你的科研经历，所以实验室要尽早入，能发表论文（看建议最好是机器学习，深度学习之类的，因为不管是哪个方向的老师都懂一些，他好提问，不然你的论文涉及的领域他不熟悉，他也就不好就论文方面提问了），甚至是顶级期刊肯定是最好的。<br>4.竞赛方面最好就ACM吧。一方面含金量称得上最高，另一方面机试也能占据优势（机试一定要重视！！！）<br>5.导师提前联系为好，不管是直播或是学硕专硕，提前联系没坏处。据说大牛导师往往很早就被联系了，因此如果入营后再联系恐怕有点晚。<br>6.夏令营得海投，一方面入营标准实属迷惑（可能差一点的学校你没能入营，但好一点的学校却入营了），另一方面多试几次，增加面试经验，而且拿到多个offer不香吗（但如果最后确定要去哪了还是早点给其他老师说一声，不要影响老师们的招生，同时也可能影响你的学弟学妹的保研。）<br>总结：夏令营是神仙打架，一般好的导师也都在夏令营就收满了。<br>同时学硕保研那更是八仙过海各显神通……特别是如今这趋势，学硕是越来越难了，因此，要想保研到好学校的好导师的学硕，真得努力……但是，对于并没有想好今后是否要搞科研的同学，<br><strong>学硕&gt;专硕&gt;直播</strong>。就算立志于搞科研，学硕也是很好的选择，而且貌似学硕还能转博，但直博肯定不能转学硕（毕竟两者录取难度都不一样）。</p></blockquote><h2 id="2-预推免"><a href="#2-预推免" class="headerlink" title="2.预推免"></a>2.预推免</h2><p>对于保研而言，虽然还有个九推，但貌似预推免算是生死一战了。<br>需要注意的是，夏令营是wl(waiting list)的，预推免成功的概率还是挺大的。因为就像前文提到的那样，许多大佬手拿许多个offer，最终他只能选择一个，那其他学校自然名额就多了出来，这也是wl存在的意义。甚至有些学校前一年被鸽穿了，因此第二年的wl特别长。对于夏令营失败的同学，或是对夏令营拿到的offer不满意的同学，预推免都有可能拿到理想的offer。也有夏令营被鸽的同学在预推免拿到了强校的强组的学硕。总之，预推免算是保底的，但最好夏令营一次性成功，不然又得多熬几个月，着实难受。</p><h2 id="3-九推"><a href="#3-九推" class="headerlink" title="3.九推"></a>3.九推</h2><p>正式推免，有可能捡漏，但最好不要把希望放在这上面。</p><h2 id="4-个人想法"><a href="#4-个人想法" class="headerlink" title="4.个人想法"></a>4.个人想法</h2><p>不管夏令营是成功还是失败，都最好要考虑大厂的暑假实习了。成功了，大厂的暑假实习可以增加你的工程经验。失败了，你得考虑预推免也不能拿到理想offer的情况，对于计算机而言，如果不是从事算法岗，其余开发岗现在大厂对于本科生和研究生一视同仁，如果不能拿到理想的offer，也没必要委屈自己强行读个研究生，给自己找不痛快。而大三暑假实习算是现在大厂招应届生的一个方式之一，个人感觉如果想本科毕业即工作，最好参加暑假实习，在大厂工作一年再转正之类的，也有利于你以后的职业发展。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>go学习笔记</title>
      <link href="/go-xue-xi-bi-ji/"/>
      <url>/go-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>yml在线校验器</title>
      <link href="/yml-zai-xian-xiao-yan-qi/"/>
      <url>/yml-zai-xian-xiao-yan-qi/</url>
      
        <content type="html"><![CDATA[<p>鉴于有时候改动##_config.yml##</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>数学竞赛前的挣扎</title>
      <link href="/shu-xue-jing-sai-qian-de-zheng-zha/"/>
      <url>/shu-xue-jing-sai-qian-de-zheng-zha/</url>
      
        <content type="html"><![CDATA[<h2 id="1-有理函数不定积分"><a href="#1-有理函数不定积分" class="headerlink" title="1.有理函数不定积分"></a>1.有理函数不定积分</h2><ul><li>注:有理函数从宏观上可以分为真分式和假分式。而任意一个假分式可以通过多项式除法变为多项式与真分式。因此，本质上就是求真分式的积分。</li></ul><h3 id="1-1真分式积分的固定套路"><a href="#1-1真分式积分的固定套路" class="headerlink" title="1.1真分式积分的固定套路"></a>1.1真分式积分的固定套路</h3><p>真分式积分的固定套路:</p><blockquote><p>1.将真分式的分母进行因式分解（直到无法分解为止）<br>2.然后进行裂项<br><img src="https://i.loli.net/2021/09/20/iEwATkFoufnSOrl.jpg" alt="Screenshot_20210920_234040.jpg"></p></blockquote><blockquote><p>3.将裂项后的所有项进行通分，依据通分后的分子与原来式子的分子相同从而求得各个待定系数<br>4.最终真分式就分为了多个式子之和了</p></blockquote><p><img src="https://i.loli.net/2021/09/20/CFbY72XSEyLGOxK.jpg" alt="Screenshot_20210920_234002.jpg"></p><h3 id="1-2三种积分的解题模板"><a href="#1-2三种积分的解题模板" class="headerlink" title="1.2三种积分的解题模板"></a>1.2三种积分的解题模板</h3><p>因此，求有理积分，一般也就是求上面三种积分。只要解决了上面三种的积分问题，大部分有理积分也就能求出来了。</p><ul><li>第一种积分过于简单，就不叙述了。</li></ul><h4 id="1-2-1第二种积分，例题"><a href="#1-2-1第二种积分，例题" class="headerlink" title="1.2.1第二种积分，例题:"></a>1.2.1第二种积分，例题:</h4><p><img src="https://i.loli.net/2021/09/20/j5yC2XhHgueG3fP.jpg" alt="Screenshot_20210920_235205.jpg"></p><h4 id="1-2-2第三种积分"><a href="#1-2-2第三种积分" class="headerlink" title="1.2.2第三种积分"></a>1.2.2第三种积分</h4><p>铺垫1:<br><img src="https://i.loli.net/2021/09/20/JkS2Dp9dH3jmYu1.jpg" alt="Screenshot_20210920_235600.jpg"></p><ul><li>重点是分部积分法降次</li></ul><p>铺垫2:<br><img src="https://i.loli.net/2021/09/21/5rolPxktUd2W74f.jpg" alt="Screenshot_20210921_000941.jpg"></p><p>铺垫2最后会转换成铺垫1,而第三种积分最终可以化成铺垫2的形式（从而通过铺垫1解法最终求得结果）</p><p>至此，三种积分的解题模板都已大功告成。</p><h3 id="1-3有理函数求积分的常见例题"><a href="#1-3有理函数求积分的常见例题" class="headerlink" title="1.3有理函数求积分的常见例题"></a>1.3有理函数求积分的常见例题</h3>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>gnome-terminal使用</title>
      <link href="/gnome-terminal-shi-yong/"/>
      <url>/gnome-terminal-shi-yong/</url>
      
        <content type="html"><![CDATA[<p>仅供参考，比如两个参数-e,-x最新版都已经废弃不用了，<a href="https://blog.csdn.net/zong596568821xp/article/details/78623130">点击进入</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>查找ip地址</title>
      <link href="/cha-zhao-ip-di-zhi/"/>
      <url>/cha-zhao-ip-di-zhi/</url>
      
        <content type="html"><![CDATA[<p>感觉这网站挺酷的<a href="https://www.ipaddress.com/">点击进入</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>github问题集</title>
      <link href="/github-wen-ti-ji/"/>
      <url>/github-wen-ti-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="1-github下载别人仓库里的代码时出错"><a href="#1-github下载别人仓库里的代码时出错" class="headerlink" title="1.github下载别人仓库里的代码时出错"></a>1.github下载别人仓库里的代码时出错</h2><p><code>fatal: unable to access 'https://github.com/*******/*****.git/': OpenSSL SSL_read: Connection was reset, errno 10054</code></p><ul><li>解决方法:将https改为git</li></ul><h2 id="2-因为下载代码时将https改为了git而造成的后果"><a href="#2-因为下载代码时将https改为了git而造成的后果" class="headerlink" title="2.因为下载代码时将https改为了git而造成的后果"></a>2.因为下载代码时将https改为了git而造成的后果</h2><p><strong>fatal: remote error: You can’t push to git</strong></p><p>解决方法，应该有效<a href="https://blog.csdn.net/u011733020/article/details/52367128">点击进入</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu上遇到的一些问题</title>
      <link href="/zai-ubuntu-shang-yu-dao-de-yi-xie-wen-ti/"/>
      <url>/zai-ubuntu-shang-yu-dao-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h2 id="1-解决ubuntu-bash-cd-bin-Permission-denied问题"><a href="#1-解决ubuntu-bash-cd-bin-Permission-denied问题" class="headerlink" title="1.解决ubuntu -bash: cd: bin/: Permission denied问题"></a>1.解决ubuntu -bash: cd: bin/: Permission denied问题</h2><p>出现这个问题的原因是因为没有权限，修改一下目录的权限即可</p><p>命令：<code>sudo chmod 777 目录</code></p><p>修改该目录权限为others，group，user都有读和可执行权限</p><h2 id="2-Ubuntu报”有线连接未托管”"><a href="#2-Ubuntu报”有线连接未托管”" class="headerlink" title="2.Ubuntu报”有线连接未托管”"></a>2.Ubuntu报”有线连接未托管”</h2><p>可能有效的方法<a href="https://blog.csdn.net/daerzei/article/details/85058130">点击进去</a></p><h2 id="3-给Ubuntu上的pycharm设置快捷方式"><a href="#3-给Ubuntu上的pycharm设置快捷方式" class="headerlink" title="3.给Ubuntu上的pycharm设置快捷方式"></a>3.给Ubuntu上的pycharm设置快捷方式</h2><ul><li>仅供参考，视你pycharm的相关安装路径而定</li></ul><p>1.<code>sudo vi /usr/share/applications/Pycharm.desktop</code><br>2.输入以下代码，在文件位置需要修改</p><pre class="line-numbers language-none"><code class="language-none">[Desktop Entry]Type=ApplicationName=PycharmGenericName=Pycharm5Comment=Pycharm5:The Python IDE Exec="/home/usr_name/pycharm-2018.1.4/bin/pycharm.sh" %f  #设置自己的pycham路径Icon=/home/usr_name/pycharm-2018.1.4/bin/pycharm.png #图标的位置Terminal=false #打开程序时是否同时打开命令行，建议关闭Categories=Pycharm #Categories这里的内容决定创建出的起动器在应用程序菜单中的位置<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>3.保存后退出，即可在搜索得到</p><ul><li>注：如果下载的是pycharm专业版，可直接在pycharm里面点击<strong>Tools</strong>,再点击<strong>Creat Desktop Entry</strong>即可(如果想创建root权限的快捷方式，得从命令行用sudo方式打开pycharm)</li></ul><h2 id="4-ping在linux上的不同"><a href="#4-ping在linux上的不同" class="headerlink" title="4.ping在linux上的不同"></a>4.ping在linux上的不同</h2><p>linux下的ping和windows下的ping稍有区别,linux下ping不会自动终止,需要按ctrl+c终止或者用参数-c指定要求完成的回应次数.下面是ping命令的一些选项：</p><blockquote><p>-d：使用Socket的SO_DEBUG功能；<br>-c&lt;完成次数&gt;：设置完成要求回应的次数；<br>-f：极限检测；<br>-i&lt;间隔秒数&gt;：指定收发信息的间隔时间；<br>-I&lt;网络界面&gt;：使用指定的网络界面送出数据包；<br>-l&lt;前置载入&gt;：设置在送出要求信息之前，先行发出的数据包；<br>-n：只输出数值；<br>-p&lt;范本样式&gt;：设置填满数据包的范本样式；<br>-q：不显示指令执行过程，开头和结尾的相关信息除外；<br>-r：忽略普通的Routing Table，直接将数据包送到远端主机上；<br>-R：记录路由过程；<br>-s&lt;数据包大小&gt;：设置数据包的大小；<br>-t&lt;存活数值&gt;：设置存活数值TTL的大小；<br>-v：详细显示指令的执行过程。</p></blockquote><h2 id="5-ubuntu突然不能上网"><a href="#5-ubuntu突然不能上网" class="headerlink" title="5.ubuntu突然不能上网"></a>5.ubuntu突然不能上网</h2><p>亲测有效<a href="https://blog.csdn.net/nicker08/article/details/103093638">点击进去</a><br>        <a href="https://www.pianshen.com/article/81971052661/">点击进去2</a> </p><h2 id="6-apt-get-提示-无法解析域名“cn-archive-ubuntu-com”-的解决"><a href="#6-apt-get-提示-无法解析域名“cn-archive-ubuntu-com”-的解决" class="headerlink" title="6.apt-get 提示 无法解析域名“cn.archive.ubuntu.com” 的解决"></a>6.apt-get 提示 无法解析域名“cn.archive.ubuntu.com” 的解决</h2><p>忘了是在啥情况下遇到的这个问题了。。。<a href="https://blog.csdn.net/wuzhidefeng/article/details/80540188">点击进去</a><br>                                    <a href="https://www.chenhuojun.com/2020/08/02/ubuntu18-04-sudo-apt-update%E6%97%A0%E6%B3%95%E8%A7%A3%E6%9E%90%E5%9F%9F%E5%90%8D%E7%9A%84%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/">点击进去2</a></p><h2 id="7-Failed-to-restart-network-service-Unit-network-service-not-found"><a href="#7-Failed-to-restart-network-service-Unit-network-service-not-found" class="headerlink" title="7.Failed to restart network.service: Unit network.service not found."></a>7.Failed to restart network.service: Unit network.service not found.</h2><p>解决方案<a href="https://www.cnblogs.com/leozhanggg/p/11772251.html">点击进去</a></p><h2 id="8-美化vim"><a href="#8-美化vim" class="headerlink" title="8.美化vim"></a>8.美化vim</h2><ul><li>刚刚安装好的vim，其界面可能不太友好，需要更改其配置，让你使用得更舒服</li></ul><blockquote><p>1.在命令行下，输入命令：<code>sudo vim /etc/vim/vimrc</code><br>2.在vim的最后一行，输入下面的这些内容:<br>“设置左侧行号<br>  set nu<br>  “设置tab键长度为4<br>  set tabstop=4<br>  “突出显示当前行<br>  set cursorline<br>  “在右下角显示光标位置的状态行<br>  set ruler<br>  “自动缩进<br>  set autoindent<br>  “覆盖文件时不备份<br>  set nobackup<br>3.编辑完成后,冒号结束编辑，再使用wq进行保存退出,如果不想保存可使用q!强制退出。</p></blockquote><p> 之后就可以 vim 文件名 进行编辑了</p>]]></content>
      
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu改成桥接模式的一些尝试</title>
      <link href="/ubuntu-gai-cheng-qiao-jie-mo-shi-de-yi-xie-chang-shi/"/>
      <url>/ubuntu-gai-cheng-qiao-jie-mo-shi-de-yi-xie-chang-shi/</url>
      
        <content type="html"><![CDATA[<p>看到的一个感觉挺简洁的方法，虽然对我没啥用。。。<a href="https://blog.csdn.net/weixin_42627397/article/details/110826285?utm_medium=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.searchformbaiduhighlight&amp;depth_1-utm_source=distribute.pc_relevant.none-task-blog-2~default~CTRLIST~default-3.searchformbaiduhighlight">简便方法</a>.</p>]]></content>
      
      
      
        <tags>
            
            <tag> 桥接模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo部署网站遇到的一些问题</title>
      <link href="/hexo-bu-shu-wang-zhan-yu-dao-de-yi-xie-wen-ti/"/>
      <url>/hexo-bu-shu-wang-zhan-yu-dao-de-yi-xie-wen-ti/</url>
      
        <content type="html"><![CDATA[<h1 id="hexo部署网站遇到的一些问题"><a href="#hexo部署网站遇到的一些问题" class="headerlink" title="hexo部署网站遇到的一些问题"></a>hexo部署网站遇到的一些问题</h1><p>1.绝对不要在主题目录里使用hexo g或hexo d,容易崩</p><p>2.当使用hexo g(d)更新内容时，出现了fatal: unable to access ‘<a href="https://github.com/.......'">https://github.com/.......'</a>: OpenSSL SSL_read: Connection was reset, errno 10054的错误<br>产生原因：一般是这是因为服务器的SSL证书没有经过第三方机构的签署，所以才报错，参考网上解决办法：解除ssl验证后，再次git即可。<br>即使用<code>git config --global http.sslVerify "false"</code></p><p><strong>3.FATAL can not read a block mapping entry解决办法</strong><br><a href="https://blog.csdn.net/feinifi/article/details/64204687">点击进入</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>用python实现traceroute</title>
      <link href="/yong-python-shi-xian-traceroute/"/>
      <url>/yong-python-shi-xian-traceroute/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1.前言"></a>1.前言</h2><p>本次用python实现traceroute，主要用到了socket,struct,select,还需要对ICMP报文有足够的了解，以及校验和算法的实现。</p><h2 id="2-ICMP协议"><a href="#2-ICMP协议" class="headerlink" title="2.ICMP协议"></a>2.ICMP协议</h2><p>TraceRoute程序的实现一般可基于ICMP和UDP两种协议来实现，这里我采用的是前者。</p><h3 id="2-1简介"><a href="#2-1简介" class="headerlink" title="2.1简介"></a>2.1简介</h3><p>ICMP（Internet Control Message Protocol），中文译作网际控制报文协议，它允许主机或路由器报告差错情况和提供有关异常情况的报告，其常用功能有：确认IP数据报是否成功送达目标地址、通知在发送过程中IP数据报被废弃的原因，改善网络设置等。<br>ICMP报文虽封装在IP数据报中，但它并不属于更高层协议，反而仍属于网络层协议。下面是网络层各协议的层次分布情况，其上下关系说明了协议之间的依赖关系（上面的高层协议依赖于下面的低层协议），比如说IP协议就依赖于ARP协议的地址解析功能，ICMP和IGMP协议就依赖于IP协议的交付功能。<br><img src="https://i.loli.net/2021/09/18/tTCO1Gf3WRboqAc.jpg" alt="ip层.jpg"></p><h3 id="2-2报文格式"><a href="#2-2报文格式" class="headerlink" title="2.2报文格式"></a>2.2报文格式</h3><p>下图是ICMP报文的格式，简单介绍了各字段占用字节的大小，接下来还需要详细介绍一下各字段表示的意义：</p><p>类型（type）：标识ICMP报文的类型。</p><p>代码（code）：用于进一步区分某种类型中的某种情况。</p><p>校验和（checksum）：用于保证ICMP报文的完整性和正确性。<br><img src="https://i.loli.net/2021/09/18/WKkGioC1YI5Vgad.jpg" alt="ICMP.jpg"></p><p>不同之处在于整个第二行的全部四个字节，其具体内容要根据ICMP报文类型的变化而具备不同意义：</p><p>当报文类型为回送请求时， 前两个字节表示id（标识符），后两个字节表示sequence（序列号）。</p><p>当报文类型为回送应答时，这四个字节会原封不动地返回源主机。</p><p>当报文类型为超时报文时，这四个字节必须强制填充为 0 。</p><p>当报文类型为参数错误时，第一个字节作为指针指向出错部分，后三个字节强制填充为 0 。</p><ul><li>注：ICMP报文需要计算校验和是由于：IP数据报计算的校验和只针对IP数据报首部有效，并不能确保数据部分一定进行无差错传输，类似地，TCP和UDP也需要自行计算校验和以确保数据部分的无差错传输。</li></ul><h3 id="2-3报文分类"><a href="#2-3报文分类" class="headerlink" title="2.3报文分类"></a>2.3报文分类</h3><p>ICMP报文主要分为两大类 - 差错报告报文和网络控制报文：差错报告报文由于责任重大，规定其数据区必须包括发生差错的IP数据报首部以及数据区的至少64比特，因为这些信息更够为源端采取差错处理措施提供依据。</p><p>网络控制报文又可分为两类 - 请求/应答报文和通知报文：其中请求/应答报文总是成对出现的，一个负责请求，一个负责应答，而通知报文顾名思义，则只负责建立一种单向的通知机制。</p><p>ICMP报文种类繁多，协议设计者按照层次将其划分为type和code两层结构，其中type字段表明ICMP报文的类型，code字段则提供了有关报文类型更为详细的信息，下面是不同type值所代表的意义：<br><img src="https://i.loli.net/2021/09/18/ihaJeBzLCmKwRO3.jpg" alt="ICMP报文类型.jpg"></p><p>确定了type之后，还需要确定code：如果当前type已经无需再进行细分的话，则置为 0 即可；但常见的诸如type为3、5、11、12 等的报文是还需细分的，具体的划分情况请看下表：</p><table><thead><tr><th>type</th><th>code</th><th>meaning</th><th>code</th><th>meaning</th></tr></thead><tbody><tr><td>03 - 目的站不可达</td><td>0</td><td>目的网络不可达</td><td>8</td><td>源主机隔离</td></tr><tr><td></td><td>1</td><td>目的主机不可达</td><td>9</td><td>禁止访问的网络</td></tr><tr><td></td><td>2</td><td>目的协议不可达</td><td>10</td><td>机制访问的主机</td></tr><tr><td></td><td>3</td><td>目的端口不可达</td><td>11</td><td>对特定TOS网络不可达</td></tr><tr><td></td><td>4</td><td>要求分段并置DF标志位</td><td>12</td><td>对特定TOS主机不可达</td></tr><tr><td></td><td>5</td><td>源路由失败</td><td>13</td><td>由于过滤，网络流量被禁止</td></tr><tr><td></td><td>6</td><td>目的网络未知</td><td>14</td><td>主机越权</td></tr><tr><td></td><td>7</td><td>目的主机未知</td><td>15</td><td>优先权终止生效</td></tr><tr><td>05  重定向</td><td>0</td><td>重定向网络</td><td>2</td><td>基于TOS的网络重定向</td></tr><tr><td></td><td>1</td><td>重定向主机</td><td>3</td><td>基于TOS的主机重定向</td></tr><tr><td>11 - 报文超时</td><td>0</td><td>TTL超时</td><td>1</td><td>分片重组超时</td></tr><tr><td>12 - 参数问题</td><td>0</td><td>IP数据报首部参数错误</td><td>2</td><td>不支持的长度</td></tr><tr><td></td><td>1</td><td>丢失必要选项</td><td></td><td></td></tr></tbody></table><ul><li>注：TOS（Type of Service），中文可译为请求的服务类型。</li></ul><h2 id="3-TraceRoute程序的基本原理是："><a href="#3-TraceRoute程序的基本原理是：" class="headerlink" title="3.TraceRoute程序的基本原理是："></a>3.TraceRoute程序的基本原理是：</h2><p>当路由器收到一份IP数据报，如果该报文的TTL字段是1，则意味着它在网路中的生存周期已经消耗殆尽，<br>本路由处理后还未到达目的主机的话，需要将该数据报丢弃，并给信源主机发送一份ICMP超时报文（包含该中间路由器的地址）。<br>这意味着：通过发送一份TTL字段为n的IP数据报给目的主机，就得到了该路径中的第n个路由器的IP地址。<br>那么我们使IP数据报的TTL字段值从1开始依次递增(一般最大不超过30)，就可以获得所有中间路由的ip地址。<br>当IP数据报到达目的主机时，由于已经到达目的主机，因此不会再发送ICMP超时报文了，而是ICMP应答报文。<br>通过区分收到的ICMP报文是超时报文（type=11）还是应答报文（type=0），以判断程序应该何时结束。</p><ul><li><p>因此，要实现一个traceroute程序，主要需要以下几大步骤<br>  1.创建原始套接字（注意：原始套接字需要管理员（root）权限，在linux下如果不用sudo运行，会报出<strong>PermissionError: [Errno 1] Operation not permitted</strong>的错误）</p><p>  2.构建ICMP报文,ICMP报文内容如下：<br>  ————————————————————————————————————————<br>  |type (8) | code (8) | checksum (16)   |<br>  ————————————————————————————————————————<br>  |        id (16)     |  seq (16)       |<br>  ————————————————————————————————————————</p><p>  3.选取合适的校验和算法，用于ICMP报文的构造</p></li></ul><h2 id="4-原始套接字"><a href="#4-原始套接字" class="headerlink" title="4.原始套接字"></a>4.原始套接字</h2><p>所谓套接字(Socket)，就是对网络中不同主机上的应用进程之间进行双向通信的端点的抽象。一个套接字就是网络上进程通信的一端，提供了应用层进程利用网络协议交换数据的机制。从所处的地位来讲，套接字上联应用进程，下联网络协议栈，是应用程序通过网络协议进行通信的接口，是应用程序与网络协议根进行交互的接口。套接字可分为流式套接字，数据包套接字以及原始套接字。<br>原始套接字与标准套接字(标准套接字指的是流式套接字和数据报套接字)的区别在于：原始套接字可以读写内核没有处理的IP数据包，而流式套接字只能读取TCP协议的数据，数据报套接字只能读取UDP协议的数据。因此，如果要访问其他协议发送的数据必须使用原始套接字。而本次使用的是ICMP协议（运行在网络层），故只能使用原始套接字来实现功能。</p><blockquote><p>AF_INET: ipv4 格式的 ip 地址<br>AF_INET6: ipv6 格式的 ip 地址</p></blockquote><h2 id="5-字节序"><a href="#5-字节序" class="headerlink" title="5.字节序"></a>5.字节序</h2><p>在各种计算机体系结构中，对于字节、字等的存储机制有所不同，因而引发了计算机通信领域中一个很重要的问题，即通信双方交流的信息单元（比特、字节、字、双字等等）应该以什么样的顺序进行传送。如果不达成一致的规则，通信双方将无法进行正确的编 / 译码从而导致通信失败。</p><p>字节序，顾名思义字节的顺序，就是大于一个字节类型的数据在内存中的存放顺序，也就是说对于单字符来说是没有字节序问题的，字符串是单字符的集合，因此字符串也没有字节序问题。</p><p>目前在各种体系的计算机中通常采用的字节存储机制主要有两种：Big-Endian 和 Little-Endian</p><ul><li>Little-Endian -&gt; 主机字节序 (小端)</li></ul><blockquote><p>数据的低位字节存储到内存的低地址位 , 数据的高位字节存储到内存的高地址位<br>我们使用的 PC 机，数据的存储默认使用的是小端</p></blockquote><ul><li>Big-Endian -&gt; 网络字节序 (大端)</li></ul><blockquote><p>数据的低位字节存储到内存的高地址位 , 数据的高位字节存储到内存的低地址位<br>套接字通信过程中操作的数据都是大端存储的(因此需要函数转换一下)，包括：接收/发送的数据、IP地址、端口。</p></blockquote><h2 id="6-struct"><a href="#6-struct" class="headerlink" title="6.struct"></a>6.struct</h2><p>有的时候需要用python处理二进制数据，比如，存取文件，socket操作时.这时候，可以使用python的struct模块来完成.<br>struct模块中最重要的三个函数是pack(), unpack(), calcsize()<br>pack(fmt, v1, v2, …)     按照给定的格式(fmt)，把数据封装成字符串(实际上是类似于c结构体的字节流)</p><p>unpack(fmt, string)       按照给定的格式(fmt)解析字节流string，返回解析出来的tuple</p><p>calcsize(fmt)                 计算给定的格式(fmt)占用多少字节的内存<br>struct中支持的格式如下表：</p><table><thead><tr><th>Format</th><th>C Type</th><th>Python</th><th>字节数</th></tr></thead><tbody><tr><td>x</td><td>pad byte</td><td>no value</td><td>1</td></tr><tr><td>c</td><td>char</td><td>string of length 1</td><td>1</td></tr><tr><td>b</td><td>signed char</td><td>integer</td><td>1</td></tr><tr><td>B</td><td>unsigned char</td><td>integer</td><td>1</td></tr><tr><td>?</td><td>_Bool</td><td>bool</td><td>1</td></tr><tr><td>h</td><td>short</td><td>integer</td><td>2</td></tr><tr><td>H</td><td>unsigned short</td><td>integer</td><td>2</td></tr><tr><td>i</td><td>int</td><td>integer</td><td>4</td></tr><tr><td>I</td><td>unsigned int</td><td>integer or long</td><td>4</td></tr><tr><td>l</td><td>long</td><td>integer</td><td>4</td></tr><tr><td>L</td><td>unsigned long</td><td>long</td><td>4</td></tr><tr><td>q</td><td>long long</td><td>long</td><td>8</td></tr><tr><td>Q</td><td>unsigned long long</td><td>long</td><td>8</td></tr><tr><td>f</td><td>float</td><td>float</td><td>4</td></tr><tr><td>d</td><td>double</td><td>float</td><td>8</td></tr><tr><td>s</td><td>char[]</td><td>string</td><td>1</td></tr><tr><td>p</td><td>char[]</td><td>string</td><td>1</td></tr><tr><td>P</td><td>void *</td><td>long</td><td></td></tr></tbody></table><h2 id="7-校验和算法"><a href="#7-校验和算法" class="headerlink" title="7.校验和算法"></a>7.校验和算法</h2><p>校验和算法的实现是最大的难点，尤其是在Python这种声明了一个变量都不知道它占多少字节的语言中。先简要说明一下计算校验和的流程。</p><blockquote><p>1.初始化校验和为 0 ，填充至首部后，将首部和数据部分组合在一起作为check_sun函数的参数。<br>2.利用函数计算出真正的校验和。<br>3.转换主机序（一般为小端）为网络序（统一为大端）。<br>4.重新填充到首部后，发送即可。</p></blockquote><p>主要内容是二进制反码求和，其中一种思路为：</p><blockquote><p>先确认字节流长度是否为2的倍数，若不是则认为添加使其为2的倍数<br>按照两个字节为一组依次求和<br>将高 16 位上的进位加到低 16 位上，重复 2 次，即可确保高 16 位为 0<br>对结果取反，并进行大小端处理</p></blockquote><h2 id="8-写代码"><a href="#8-写代码" class="headerlink" title="8.写代码"></a>8.写代码</h2><p>经过前面基础知识的铺垫，接下来的思路就比较清晰了。首先先找到一个合适的校验和算法，构建好ICMP回送请求报文后，将其发送出去（TTL依次递增，每次发三个包）。计算好阻塞的时间，超出你设定的时间后（一般设置为3秒）就认定为超时，以*代替。对返回的ICMP报文进行解析并判断，根据报文类型的不同进行不同的处理。</p>]]></content>
      
      
      
        <tags>
            
            <tag> traceroute icmp python </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
